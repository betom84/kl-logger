package frames_test

import (
	"testing"
	"time"

	"github.com/betom84/kl-logger/klimalogg/frames"
	"github.com/betom84/kl-logger/repository"
	"github.com/stretchr/testify/assert"
)

func TestCurrentWeatherResponseFrame(t *testing.T) {
	var sampleFrame = []byte{0x00, 0x00, 0xe5, 0x01, 0x07, 0x00, 0x30, 0x64, 0x1a, 0xb1, 0x13, 0x62, 0x10, 0x52, 0x14, 0x91, 0x85, 0xa3, 0x98, 0x32, 0x55, 0x01, 0x49, 0x17, 0x5d, 0x81, 0x41, 0x27, 0x43, 0x87, 0x36, 0x38, 0x56, 0x56, 0x14, 0xa1, 0x87, 0x29, 0x14, 0x91, 0x85, 0xa4, 0x89, 0x38, 0xaa, 0x01, 0x49, 0x17, 0x5d, 0x51, 0x49, 0x23, 0x75, 0x17, 0x44, 0x49, 0x4a, 0xaa, 0x14, 0xa1, 0x41, 0xc5, 0x14, 0x91, 0x85, 0xb2, 0x91, 0x40, 0x64, 0x01, 0x49, 0x17, 0x5e, 0x91, 0x4a, 0x22, 0x7b, 0x27, 0x32, 0x50, 0x26, 0x42, 0x14, 0xa2, 0x04, 0xc0, 0x14, 0x91, 0x85, 0xa4, 0x84, 0x38, 0x67, 0x01, 0x49, 0x17, 0x5d, 0x61, 0x4a, 0x22, 0x6c, 0x07, 0x44, 0x50, 0x06, 0x38, 0x14, 0xa2, 0x06, 0xc7, 0x14, 0x91, 0x85, 0xb2, 0x87, 0x41, 0xaa, 0x01, 0x49, 0x17, 0x5d, 0x31, 0x49, 0x19, 0x81, 0x57, 0x40, 0x52, 0x1a, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0xaa, 0xaa, 0x0a, 0xa4, 0xaa, 0x4a, 0xaa, 0xa4, 0xaa, 0x4a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0xaa, 0xaa, 0x0a, 0xa4, 0xaa, 0x4a, 0xaa, 0xa4, 0xaa, 0x4a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0xaa, 0xaa, 0x0a, 0xa4, 0xaa, 0x4a, 0xaa, 0xa4, 0xaa, 0x4a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0xaa, 0xaa, 0x0a, 0xa4, 0xaa, 0x4a, 0xaa, 0xa4, 0xaa, 0x4a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}

	frame := frames.NewCurrentWeatherResponseFrame()
	err := frame.UnmarshalBinary(sampleFrame)
	assert.NoError(t, err)

	assert.Implements(t, (*repository.WeatherSample)(nil), frame)

	assert.Equal(t, 100, frame.SignalQuality())
	assert.Equal(t, uint16(6833), frame.CfgChecksum())
	assert.Equal(t, uint(55), frame.Humidity(0))
	assert.Equal(t, uint(32), frame.HumidityMin(0))
	assert.Equal(t, uint(98), frame.HumidityMax(0))
	assert.InDelta(t, float32(-1.5), frame.TemperatureMin(0), 0.01)
	assert.InDelta(t, float32(33.6), frame.TemperatureMax(0), 0.01)
	assert.InDelta(t, float32(25.6), frame.Temperature(0), 0.01)

	assertDateTime(t, "2013-06-21 00:07", frame.HumidityMaxTime(0))
	assertDateTime(t, "2014-09-18 15:03", frame.HumidityMinTime(0))
	assertDateTime(t, "2014-09-17 15:38", frame.TemperatureMaxTime(0))
	assertDateTime(t, "2014-01-27 04:11", frame.TemperatureMinTime(0))
}

func assertDateTime(t *testing.T, date string, actual time.Time) {
	t.Helper()

	expected, err := time.Parse("2006-01-02 15:04", date)
	assert.NoError(t, err)
	assert.Equal(t, expected.Format(time.RFC3339), actual.Format(time.RFC3339))
}

func TestCurrentWeatherRequestFrame(t *testing.T) {
	frame := frames.NewCurrentWeatherRequestFrame()

	assert.Equal(t, uint32(0xffffff), frame.LastHistory())
	assert.Equal(t, 8, frame.ComInterval())

	frame.SetDeviceID(4711)
	frame.SetCfgChecksum(4711)
	frame.SetLoggerID(1)

	actual, err := frame.MarshalBinary()
	expected := []byte{0xd5, 0x0, 0xb, 0x12, 0x67, 0x1, 0x4, 0x12, 0x67, 0x80, 0x8, 0xff, 0xff, 0xff}

	assert.NoError(t, err)
	assert.Equal(t, expected, actual)

	frame.SetLastHistory(uint32(4711))
	assert.Equal(t, uint32(4711), frame.LastHistory())
}

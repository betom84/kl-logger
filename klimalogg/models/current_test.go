package models_test

import (
	"testing"

	"github.com/betom84/kl-logger/klimalogg/models"
	"github.com/betom84/kl-logger/transceiver"
	"github.com/stretchr/testify/assert"
)

var weatherExampleFrame = []byte{0x00, 0x00, 0xe5, 0x01, 0x07, 0x00, 0x30, 0x64, 0x1a, 0xb1, 0x13, 0x62, 0x10, 0x52, 0x14, 0x91, 0x85, 0xa3, 0x98, 0x32, 0x55, 0x01, 0x49, 0x17, 0x5d, 0x81, 0x41, 0x27, 0x43, 0x87, 0x36, 0x38, 0x56, 0x56, 0x14, 0xa1, 0x87, 0x29, 0x14, 0x91, 0x85, 0xa4, 0x89, 0x38, 0xaa, 0x01, 0x49, 0x17, 0x5d, 0x51, 0x49, 0x23, 0x75, 0x17, 0x44, 0x49, 0x4a, 0xaa, 0x14, 0xa1, 0x41, 0xc5, 0x14, 0x91, 0x85, 0xb2, 0x91, 0x40, 0x64, 0x01, 0x49, 0x17, 0x5e, 0x91, 0x4a, 0x22, 0x7b, 0x27, 0x32, 0x50, 0x26, 0x42, 0x14, 0xa2, 0x04, 0xc0, 0x14, 0x91, 0x85, 0xa4, 0x84, 0x38, 0x67, 0x01, 0x49, 0x17, 0x5d, 0x61, 0x4a, 0x22, 0x6c, 0x07, 0x44, 0x50, 0x06, 0x38, 0x14, 0xa2, 0x06, 0xc7, 0x14, 0x91, 0x85, 0xb2, 0x87, 0x41, 0xaa, 0x01, 0x49, 0x17, 0x5d, 0x31, 0x49, 0x19, 0x81, 0x57, 0x40, 0x52, 0x1a, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0xaa, 0xaa, 0x0a, 0xa4, 0xaa, 0x4a, 0xaa, 0xa4, 0xaa, 0x4a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0xaa, 0xaa, 0x0a, 0xa4, 0xaa, 0x4a, 0xaa, 0xa4, 0xaa, 0x4a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0xaa, 0xaa, 0x0a, 0xa4, 0xaa, 0x4a, 0xaa, 0xa4, 0xaa, 0x4a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0xaa, 0xaa, 0x0a, 0xa4, 0xaa, 0x4a, 0xaa, 0xa4, 0xaa, 0x4a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
var weatherExampleData = []byte{0x64, 0x1b, 0x53, 0x21, 0x10, 0x10, 0x30, 0x21, 0x10, 0x12, 0xa6, 0x62, 0x40, 0x42, 0x02, 0x0c, 0x30, 0xb1, 0x32, 0x0c, 0x31, 0x73, 0x26, 0x58, 0x61, 0x86, 0x34, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0xaa, 0xaa, 0x0a, 0xa4, 0xaa, 0x4a, 0xaa, 0xa4, 0xaa, 0x4a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0xaa, 0xaa, 0x0a, 0xa4, 0xaa, 0x4a, 0xaa, 0xa4, 0xaa, 0x4a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0xaa, 0xaa, 0x0a, 0xa4, 0xaa, 0x4a, 0xaa, 0xa4, 0xaa, 0x4a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0xaa, 0xaa, 0x0a, 0xa4, 0xaa, 0x4a, 0xaa, 0xa4, 0xaa, 0x4a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0xaa, 0xaa, 0x0a, 0xa4, 0xaa, 0x4a, 0xaa, 0xa4, 0xaa, 0x4a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0xaa, 0xaa, 0x0a, 0xa4, 0xaa, 0x4a, 0xaa, 0xa4, 0xaa, 0x4a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0xaa, 0xaa, 0x0a, 0xa4, 0xaa, 0x4a, 0xaa, 0xa4, 0xaa, 0x4a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0xaa, 0xaa, 0x0a, 0xa4, 0xaa, 0x4a, 0xaa, 0xa4, 0xaa, 0x4a, 0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}

func TestUnmarshalCurrentWeatherData(t *testing.T) {
	f := transceiver.Frame{}
	f.UnmarshalBinary(weatherExampleFrame)

	model := models.CurrentWeatherResponseData{}

	err := model.UnmarshalBinary(f.Data)
	assert.NoError(t, err)

	assert.Equal(t, 100, model.SignalQuality)
	assert.Equal(t, 6833, model.CfgChecksum)
	assert.Equal(t, uint(55), model.Humidity[0])
	assert.Equal(t, uint(32), model.HumidityMin[0])
	assert.Equal(t, uint(98), model.HumidityMax[0])
	assert.InDelta(t, float32(-1.5), model.TemperatureMin[0], 0.01)
	assert.InDelta(t, float32(33.6), model.TemperatureMax[0], 0.01)
	assert.InDelta(t, float32(25.6), model.Temperature[0], 0.01)

	model = models.CurrentWeatherResponseData{}
	err = model.UnmarshalBinary(weatherExampleData)
	assert.NoError(t, err)

	assert.Equal(t, 100, model.SignalQuality)
	assert.Equal(t, 6995, model.CfgChecksum)
	assert.Equal(t, uint(42), model.Humidity[0])
	assert.Equal(t, uint(40), model.HumidityMin[0])
	assert.Equal(t, uint(62), model.HumidityMax[0])
	assert.InDelta(t, float32(21.8), model.TemperatureMin[0], 0.01)
	assert.InDelta(t, float32(25.8), model.TemperatureMax[0], 0.01)
	assert.InDelta(t, float32(23.4), model.Temperature[0], 0.01)
}
